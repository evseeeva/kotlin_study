import kotlin.math.*

fun main() {

    /**
     * Задание 1: Условные операторы
     * Напишите программу, которая принимает целое число от пользователя и проверяет,
     * является ли оно положительным, отрицательным или нулем.
     * Используйте различные варианты условных операторов (if, if-else, when).
     */

    println("Введите целое число")
    val x = readLine()?.toIntOrNull()
    if (x != null) {
        //вариант 1 - if
        if (x > 0) {
            println("Вы ввели положительное число")
        }
        if (x < 0) {
            println("Вы ввели отрицательное число")
        }
        if (x == 0) {
            println("Вы ввели 0")
        }

        //вариант 2 - if-else
        if (x > 0) {
            println("Вы ввели положительное число")
        } else if (x < 0) {
            println("Вы ввели отрицательное число")
        } else {
            println("Вы ввели 0")
        }

        //вариант 3 - when
        when {
            (x > 0) -> println("Вы ввели положительное число")
            (x < 0) -> println("Вы ввели отрицательное число")
            else -> println("Вы ввели 0")

        }

    } else
        println("Вы ввели не целое число")




        /**
         * Задание 2: Циклы
         * a.
         * Создайте массив из 10 чисел. Напишите цикл for, который будет выводить каждое число и его квадрат.
         * После этого напишите цикл while, который будет выводить каждое число и его куб.
         */

        val numbers = arrayOf(1, 2, 3, 4, 5, 8, 7, 8, 9, 10)
        for (number in numbers) {
            println("Число - $number, квадрат числа - ${number.toDouble().pow(2).toInt()}")
        }
        var i = 0
        while (i < numbers.size) {
            val number = numbers[i]
            println("Число - ${number}, куб числа - ${number.toDouble().pow(3).toInt()}")
            i++
        }

        /**
         * Задание 2: Циклы
         * b.
         * Используйте функцию repeat для вывода строки “Привет, мир!” 10 раз.
         */

        repeat(10) { i ->
            println("Привет, мир!(${i + 1})")
        }
        /**
         * Задание 3: Return, Break, Continue
         * a.
         * Напишите функцию, которая принимает массив чисел и возвращает сумму только тех чисел,
         * которые больше 10. Если обнаруживается число меньше 0, функция должна немедленно прекратить
         * обработку и вернуть текущую сумму (используйте return).
         */

        val sum = printSum(numbers)
        println(sum)

        /**
         * Задание 3: Return, Break, Continue
         * b.
         * Напишите цикл, который выводит числа от 1 до 10, но пропускает числа 3 и 7 (используйте continue).
         */

        for (i in 1..10) {
            if (i == 3 || i == 10) {
                continue
            }
            print("$i ")
        }
        println()

        /**
         * Задание 3: Return, Break, Continue
         * c.
         * Вам дана двумерная матрица целых чисел и целевое число. Напишите программу на Kotlin,
         * чтобы искать целевое число в матрице. Если целевое число найдено, выведите его позицию (строка и столбец)
         * и завершите выполнение циклов; если не найдено и выведите сообщение об этом. (используйте break).
         * Целевое значение должно вводиться пользователем.
         */

        println("Введите целевое число(целое)")
        val matrix = arrayOf(
            arrayOf(1, 2, 1, 4, 5),
            arrayOf(6, 7, 8, 9, 10),
            arrayOf(11, 12, 13, 14, 15),
            arrayOf(16, 1, 18, 19, 20),
            arrayOf(21, 22, 23, 24, 25)
        )
        val n = readLine()?.toIntOrNull()
        if (n == null)
            println("Вы ввели не целое число")
        else {
            var posI = -1
            var posJ = -1
            extCycle@ for (i in matrix.indices) {
                for (j in matrix[i].indices) {
                    if (matrix[i][j] == n) {
                        posI = i
                        posJ = j
                        println("Целевое число на позиции ($posI, $posJ) в матрице")
                        break@extCycle
                    }
                }
            }
            if (posI == -1 && posJ == -1)
                println("Целевое число отсутствует в матрице")
        }

        /**
         * Задание 4: Обработка исключений
         * a.
         * Напишите программу, которая просит пользователя ввести целое число. Если пользователь вводит что-то другое,
         * отлавливайте исключение и выводите сообщение об ошибке. Блок finally должен выводить сообщение “Конец программы”.
         */

        var y: Int = 0
        println("Введите целое число")
        try {
            y = readln().toInt()
        } catch (e: Exception) {
            println("Вызвано исключение: $e")
        } finally {
            println("Конец программы")
        }

        /**
         * Задание 4: Обработка исключений
         * b.
         * Создайте ситуацию, где может возникнуть исключение (например, обращение к несуществующему элементу массива
         * или деление на ноль), и обработайте это исключение, выводя стек вызовов.
         */

        val s: String = "строка"
        try {
            println(s[9])
        } catch (e: Exception) {
            println("Вызвано исключение: $e")
            println("Стек вызовов:")
            for (line in e.stackTrace)
                println("\tat $line")
        }

    }
    fun printSum(array: Array<Int>): Int {
        var sum = 0
        for (x in array) {
            if (x < 0) {
                return sum
            }
            if (x > 10)
                sum += x
        }
        return sum
    }



